package array;

import java.util.*;

// nums长度为n，范围是[1,n]。输出nums是否为sequence[i]的最短超序列
/*
n == nums.length
1 <= n <= 104
nums是[1, n]范围内所有整数的排列
1 <= sequences.length <= 104
1 <= sequences[i].length <= 104
1 <= sum(sequences[i].length) <= 105
1 <= sequences[i][j] <= n
sequences的所有数组都是 唯一 的
sequences[i]是nums 的一个子序列

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/ur2n8P
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class SequenceReconstruction {
    public boolean sequenceReconstruction(int[] nums, int[][] sequences) {
        int n = nums.length;
        int[] required = new int[n+1];
        for (int i = 0; i < n-1; i++) {
            required[nums[i]] =
                    nums[i+1];
        }
        // 存放需要在seqs中出现的pair
//        Set<Integer> requiredPairs = new HashSet<>(n, 1);
//        for(int i=0; i<n-1; i++) {
//            requiredPairs.add((nums[i] << 16) | nums[i+1]);
//        }
//        Set<Integer> wentThorough = new HashSet<>(n, 1);
        for (int[] seq : sequences) {
            for (int i = 0; i < seq.length-1; i++) {
//                int key = (seq[i] << 16) | seq[i+1];
//                if (numToIndex.get(seq[i])>= numToIndex.get(seq[i+1]) )
//                    return false; // 不允许的pair，因为逆序了
//                if (wentThorough.contains(key))
//                    continue;

                // 收集关键pair到set
//                wentThorough.add(key);
               // requiredPairs.remove(key); // 优化，remove
                if(required[seq[i]] == seq[i+1]) {
                    required[seq[i]] = 0;
                }
            }
        }
        // set 必须完备，否则对应 最短超序列就不唯一；这个判断被优化掉了——在上面遍历过程中remove
//        for (Integer key : wentThorough) {
//            requiredPairs.remove(key);
//        }
        for(int i : required) {
            if (i !=0)
                return false;
        }
        return true;
    }

    public static void main(String[] args) {
        SequenceReconstruction sr = new SequenceReconstruction();
        int[] nums = new int[] {232,398,294,604,461,334,724,46,267,909,35,516,496,937,764,8,745,345,127,845,422,392,481,911,44,59,626,922,518,706,592,525,194,252,639,431,424,482,673,593,720,990,1,325,113,341,512,980,68,459,654,611,129,572,631,261,860,487,747,893,729,649,771,84,455,727,90,511,851,135,82,827,464,132,166,440,531,102,105,205,281,471,565,986,501,336,425,244,56,913,914,576,2,536,271,312,73,279,603,584,609,301,676,131,453,355,297,31,280,713,628,140,907,386,890,716,814,866,521,652,155,47,201,886,469,844,489,299,156,678,663,254,650,405,616,700,959,302,900,107,39,624,328,247,969,169,136,270,289,145,230,750,582,472,499,897,253,545,231,477,828,313,846,875,238,51,218,665,837,206,352,942,714,273,373,794,666,330,508,323,130,686,190,940,796,865,168,581,560,76,864,863,189,374,842,165,458,987,606,644,503,526,227,488,490,120,573,442,260,629,921,510,45,903,908,347,559,326,411,89,14,698,378,162,257,447,646,101,723,943,972,414,121,10,63,33,222,589,802,841,718,887,314,917,369,15,938,834,177,811,836,795,184,618,500,288,746,176,608,160,963,789,243,399,57,187,100,553,749,598,24,993,570,579,548,809,300,485,332,982,320,995,106,981,916,375,977,144,528,884,275,768,960,444,712,142,554,599,119,711,340,198,174,939,858,202,284,541,806,984,953,681,647,329,50,935,430,207,476,868,30,167,752,915,539,562,483,480,983,791,438,595,148,610,441,902,5,530,367,726,766,179,408,587,78,687,88,699,173,870,67,759,734,790,808,229,782,925,583,537,769,810,946,79,748,245,680,216,104,754,81,523,689,781,34,561,793,443,58,708,209,966,792,831,204,60,457,623,588,495,571,755,905,389,85,519,819,556,989,850,149,153,826,251,634,193,596,867,3,118,869,203,880,852,655,256,602,380,804,406,785,636,192,773,310,117,770,954,322,765,28,241,577,385,185,72,91,690,196,315,384,538,396,833,435,237,403,950,930,486,633,757,885,549,738,75,225,366,998,494,115,778,65,651,803,450,682,558,962,839,840,877,529,835,255,359,996,807,9,600,580,760,29,640,952,927,348,439,154,181,306,214,362,725,37,180,515,997,818,217,53,223,743,975,388,797,591,971,820,337,80,27,621,493,517,635,872,947,779,498,544,643,150,460,702,910,235,416,874,220,308,658,801,152,200,533,920,697,948,423,721,361,240,859,590,17,331,838,492,504,466,999,246,112,667,400,351,630,776,18,933,393,98,642,420,988,139,906,397,401,226,32,985,66,688,151,641,21,446,304,64,234,693,656,677,932,445,739,111,49,575,958,354,114,210,163,719,124,454,578,594,16,522,19,679,918,620,228,879,534,346,912,182,777,825,418,317,737,242,929,175,462,327,259,710,514,287,497,161,568,122,956,343,799,475,349,74,69,20,395,638,502,96,311,767,159,524,272,298,894,338,172,849,979,370,919,855,409,871,224,368,158,923,823,61,978,197,11,387,585,830,307,318,429,350,283,381,239,146,615,437,12,941,961,675,653,87,183,92,622,274,427,484,95,876,123,452,733,417,670,853,847,685,812,775,364,507,285,574,188,43,436,264,854,924,829,505,992,48,730,694,703,542,199,957,379,742,407,788,360,557,704,955,36,861,491,128,77,692,86,474,309,612,22,674,931,221,353,564,319,26,473,324,70,1000,705,296,40,419,617,219,295,110,949,898,695,94,731,645,383,882,157,520,479,936,13,108,873,815,973,451,805,567,668,535,186,601,772,316,551,178,569,619,467,134,344,258,262,822,434,798,848,463,657,934,97,968,339,265,722,664,236,171,857,527,892,52,342,926,543,138,263,410,249,607,744,717,761,974,566,862,660,991,195,170,293,965,376,358,164,394,709,696,215,371,895,38,951,141,478,211,740,817,412,787,321,54,547,774,672,550,357,282,753,783,684,540,248,291,391,967,546,683,109,732,883,552,290,964,899,42,671,372,555,888,335,212,614,277,735,71,448,143,402,901,648,83,786,55,821,41,365,278,856,116,532,509,382,126,421,707,390,465,662,763,881,741,428,25,878,213,661,701,292,413,994,433,586,415,432,843,605,456,4,133,513,627,93,751,137,832,404,468,891,377,659,813,945,303,268,944,824,691,286,6,728,669,233,449,970,816,426,103,99,632,147,191,889,715,762,266,356,736,904,333,23,928,62,276,756,758,563,125,780,784,470,269,637,506,7,250,625,305,208,363,896,613,597,976,800};
        int[][] seqs = new int[][] {{232,398,294,604,461,334,724,46,267,909,35,516,496,937,764,8,745,345,127,845,422,392,481,911,44,59,626,922,518,706,592,525,194,252,639,431,424,482,673,593,720,990,1,325,113,341,512,980,68,459,654,611,129,572,631,261,860,487,747,893,729,649,771,84,455,727,90,511,851,135,82,827,464,132,166,440,531,102,105,205,281,471,565,986,501,336,425,244,56,913,914,576,2,536,271,312,73,279,603,584,609,301,676,131,453,355,297,31,280,713,628,140,907,386,890,716,814,866,521,652,155,47,201,886,469,844,489,299,156,678,663,254,650,405,616,700,959,302,900,107,39,624,328,247,969,169,136,270,289,145,230,750,582,472,499,897,253,545,231,477,828,313,846,875,238,51},{},{51,218},{218,665,837,206,352,942,714,273,373,794,666,330,508,323,130,686,190,940,796,865,168,581,560,76,864,863,189,374,842,165,458,987,606,644,503,526,227,488,490,120,573,442,260,629,921,510,45,903,908,347,559,326,411,89,14,698,378,162,257,447,646,101,723,943,972,414,121,10,63,33,222,589,802,841,718,887,314,917,369,15,938,834,177,811,836,795,184,618,500,288,746,176,608,160,963,789,243,399,57,187,100,553,749,598,24,993,570,579,548,809,300,485,332,982,320,995,106,981,916,375,977,144,528,884,275,768,960,444,712,142,554,599,119,711,340,198,174,939,858,202,284,541,806,984,953,681,647,329,50,935,430,207,476,868,30,167,752,915,539,562,483,480,983,791,438,595,148,610,441,902,5,530,367,726,766,179,408,587,78,687,88,699,173,870,67,759,734,790,808,229,782,925,583,537,769,810,946,79,748,245,680,216,104,754,81,523,689,781,34,561,793,443,58,708,209,966,792,831,204,60,457,623,588,495,571,755,905,389,85,519,819,556,989,850,149,153,826,251,634,193,596,867,3,118,869,203,880,852,655,256,602,380,804,406,785,636,192,773,310,117,770,954,322,765,28,241,577,385,185,72,91,690,196,315,384,538,396,833,435,237,403,950,930,486,633,757,885,549,738,75,225,366,998,494,115,778,65,651,803,450,682,558,962,839,840,877,529,835,255,359,996,807,9,600,580,760,29,640,952,927,348,439,154,181,306,214,362,725,37,180,515,997,818,217,53,223,743,975,388,797,591,971,820,337,80,27,621,493,517,635,872,947,779,498,544,643,150,460,702,910,235,416,874,220,308,658,801,152,200,533,920,697,948,423,721,361,240,859,590,17,331,838,492,504,466,999,246,112,667,400,351,630,776,18,933,393,98,642,420,988,139,906,397,401,226,32,985,66,688,151,641,21,446,304,64,234,693,656,677,932,445,739,111,49,575,958,354,114,210,163,719,124,454,578,594,16,522,19,679,918,620},{620,228}};
        boolean b = sr.sequenceReconstruction(nums, seqs);
        System.out.println(b);
    }
}
