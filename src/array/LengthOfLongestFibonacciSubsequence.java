package array;

import javax.swing.plaf.IconUIResource;
import java.util.*;

// 最长斐波那契子序列长度，如
// [1,2,3,4,5,6,7,8] => 5，因为其中有[1, 2, 3, 5, 8]共个元素
public class LengthOfLongestFibonacciSubsequence {
    public int lenLongestFibSubseq(int[] arr) {
        // 缓存相邻的俩数，防止后面重复。如1 2 3 5 对应缓存1_2, 2_3, 3_5，防止2_3再来一次
        Set<String> firstSecond = new HashSet<>();
        HashMap<Integer, Integer> indices = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            indices.put(arr[i], i);
        }
        int start;
        int second;
        int result = 0;
        // 选择第一个元素
        for (int i=0; i<arr.length-2; i++) {
            // 如果后面的元素不比result大，直接退出
            if (arr.length - i < result) {
                break;
            }
            start = arr[i];
            // 选择第二个元素
            for(int j=i+1; j<arr.length-1; j++) {
                second = arr[j];
                int count = 2;
                // 缓存已经遍历的头两个元素，后面再出现则直接跳过
                if (firstSecond.contains(i + "_" + j)) {
                    System.out.printf("already have %d_%d%n", i, j);
                    continue;
                }
                firstSecond.add(i + "_" + j);
                int first = start;
                int toFind = first + second;
                // 寻找子序列（有第一、第二个，找第三个）
            /*    while (cur < arr.length) {
                    // 找到了
                    if (first + second == arr[cur]) {
                        firstIndex = secondIndex;
                        secondIndex = cur;
                        firstSecond.add(firstIndex + "_" + secondIndex);

                        first = second;
                        second = arr[cur];
                        count++;
                        // 已经到最后一个元素了，且最后一个元素被纳入。根据大小关系，后面再也不会有更长的了
                        if (cur == arr.length - 1 ) {
                            result = Math.max(result, count);
                            break outer;
                        }
                    } else if (first + second < arr[cur]) {
                        // 当前值太大，后面不会有结果了
                        System.out.printf("have get large num %d %d < %d, no need to proceed%n", arr[firstIndex], arr[secondIndex], arr[cur]);
                        break;
                    }
                    cur++;
                }*/

                int loc = indices.get(toFind);
                if (loc != -1 && loc < i) {
                    count++;
                }
                result = Math.max(result, count);
            }
        }
        return result;
    }
    public int lenLongestFibSubseq1(int[] arr) {
        // 构建map：元素->下标
        HashMap<Integer, Integer> indices = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            indices.put(arr[i], i);
        }
        int[][] dp = new int[arr.length][arr.length];
        for (int[] d : dp) {
            Arrays.fill(d, 0);
        }
        int result = 0;
        // 调用函数dfs计算以i、j开头的数组的fibonacci长度
/*        for (int i=0; i<arr.length-1; i++) {
            for (int j = i+1; j < arr.length + 1; j++) {
                int count = 2 + dfs(arr, indices, i, j, dp);
                result = Math.max(result, count);
            }
        }*/
        // 通过从后往前遍历，[j, i] => 后面有几个元素与之组成fibonacci数列 j<i<k
        for (int i=arr.length-1; i>0; i--) {
            for (int j=i-1; j>=0; j--) {
                int k = indices.getOrDefault(arr[i] + arr[j], -1);
                // 没找到
                if (k == -1 || k <= j) {
                    dp[j][i] = 0;
                } else {
                // 找到 就算自己一个
                    dp[j][i] = 1 + dp[i][k];
                }
                result = Math.max(result, dp[j][i]);
            }
        }

        if (result > 0) {
            result += 2;
        }
        return result;
    }
    // 以i，j开头，后续包含的最大fibonacci数列长度
    private int dfs(int[] arr, Map<Integer, Integer> indices, int i, int j, int[][] dp) {
        if (arr.length-1 <= j) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        int k = indices.getOrDefault(arr[i] + arr[j], -1);
        int count;
        // 找到
        if (k > j) {
            count = 1 + dfs(arr, indices, j, k, dp);
            dp[i][j] = count;
            return count;
        }
        // 没找到
        return 0;
    }

    public static void main(String[] args) {
        LengthOfLongestFibonacciSubsequence l = new LengthOfLongestFibonacciSubsequence();
        int[] arr = {1, 2, 3, 5, 6, 7, 8, 13};
        int[] arr1 = {1,3,7,11,12,14,18};
        int[] arr2 = {1,3,5};
        int[] arr3 = {136,2819,3145,3162,4217,5730,5909,7550,7891,8207,9351,10289,10847,10902,11664,14575,15108,15831,16042,17665,19649,19756,21158,22507,22930,23311,23748,24338,24448,24584,24761,26247,27357,28397,30107,31293,32745,32957,33678,33971,34924,35357,37351,37590,39348,40400,42084,43851,48387,48522,52131,52940,54492,56501,57735,58370,63459,63702,64815,65353,65813,66421,68125,68549,69730,69979,70338,70456,71778,73174,73642,74597,74942,76919,77166,78500,80713,83902,84160,85231,86580,86614,87515,87530,88350,88858,89300,91449,92813,95759,96927,98691,98764,99057,102642,102742,103300,103798,104689,105016,107535,108091,108911,109084,109234,109345,109414,109899,110178,115511,115564,116776,117480,119011,119564,119648,121182,121546,122759,124580,128887,131568,132683,133597,134373,134934,137623,139077,140457,140637,142472,142536,143087,143809,146479,146613,149140,149846,151285,152854,154710,155042,155562,156870,158059,158640,159625,159961,161027,163562,164342,165272,165863,166492,167490,167556,168276,170450,171738,171891,173822,173907,174293,175292,175322,176548,176798,179238,180305,181358,181838,181938,182071,186045,188303,188823,190248,190368,190669,193205,194340,196619,196970,198716,200604,201702,201901,206172,207013,207345,210190,211476,212536,213800,215599,219707,219817,220676,220944,223208,224322,226090,226442,228927,229610,230465,232676,234142,236844,237602,238960,239642,239680,242903,243733,244556,244643,245279,245280,245567,250357,251421,253863,254950,256400,256941,258381,263018,264945,265396,266144,266705,268185,270810,271156,271241,271363,271817,273771,273939,274322,276268,276369,276683,279701,280757,282781,284879,287538,287940,290062,293239,296500,296705,296913,298044,299578,300197,300717,303265,303330,303627,308506,309657,310023,312293,313738,313751,315332,317934,319077,319414,319420,324836,326371,327407,327754,329341,329516,330993,331155,331172,332558,333037,334354,336207,336576,338631,340493,341397,343305,343843,344304,344325,344442,346076,347691,347858,347976,351518,351824,352879,356916,357837,359246,359347,359367,361034,361996,365380,365715,365930,367317,369420,373896,374914,376247,377465,379034,379256,380566,382500,384393,386112,386608,388709,388951,389982,392910,393031,394044,395001,395093,395274,395344,396031,397336,398562,398612,398643,399945,400385,400396,400892,400908,401035,402435,403424,404142,404770,405262,407553,415043,416671,421015,421430,422198,423479,424607,425237,425745,427562,429567,431073,434051,437335,438559,439041,442762,443670,446945,447718,450702,452568,452935,455276,455865,458370,459253,459577,459751,460166,463388,467300,470343,471085,471693,471890,474206,477818,478822,479299,479633,480637,483994,485323,485420,487066,488469,489079,489228,489277,492732,494802,495965,498786,500675,503693,504425,509043,509148,512877,513699,514344,514994,515178,515365,515762,516106,516244,516625,517492,518364,518993,523850,524406,524953,525685,525935,526273,526649,526701,528046,528285,528509,528660,529409,529716,530807,531188,532919,535365,536322,537039,539058,540042,540171,544772,547742,548071,549700,551113,551553,553295,553345,554775,554929,555798,555875,557956,558480,562145,564276,565716,566712,567845,567878,568503,569244,569601,570730,573645,574585,576654,577857,578371,578476,582876,583103,586326,586333,586487,586628,586776,587303,587307,587424,587470,587984,588150,591630,592514,592796,593562,593900,593969,594506,594518,594892,595933,596370,597139,600098,601158,601498,602106,602843,602891,603303,604615,607581,608954,609547,611075,611486,612564,613769,614721,616590,617039,617904,626186,629139,629995,631384,633196,633547,634085,635624,636264,636453,639178,639891,640757,642667,643029,645154,646256,647542,650229,651486,653134,658601,658880,660996,661755,662859,663531,664435,664822,665861,668978,668979,671975,672041,674575,675827,675929,676259,676450,680578,681226,681540,682057,683355,685616,686835,691496,691787,694395,694512,695533,696234,698264,699194,699643,700277,701767,704026,705084,706104,706317,706591,706691,706861,707585,708676,710574,712153,712648,713560,715278,715814,716521,716853,717996,720419,721395,721454,721462,722209,722647,723071,723541,724770,724847,725103,726369,727167,727885,729138,731090,732149,733372,733834,741397,744148,745223,746061,747522,747742,749405,749587,753006,753702,753876,753896,755346,756481,757255,762424,763946,766025,767605,767788,768819,770150,771863,773037,773873,774120,774966,775227,776012,778385,780180,780772,782596,784085,786114,786123,786587,788340,788503,789196,789856,792154,792168,793410,793667,795230,796421,796737,796792,796916,799212,800042,801875,803824,804203,804288,804514,806834,807871,807945,810319,811585,811747,820527,824572,824739,829147,829816,829951,830737,832388,832952,833251,833560,834952,836417,836797,837477,837642,838945,839354,840884,841576,841792,842325,842772,843239,843597,845392,845456,851469,852276,854868,855069,857256,857669,859432,860344,860686,862041,862479,864221,865078,865545,869107,870179,870318,871123,871757,872025,872913,873316,874802,876435,877353,877759,880866,881226,881854,883552,886314,889669,890531,890726,892193,894823,895307,895569,899911,901364,904358,904982,906370,907382,909927,912299,912691,913547,915736,918200,918819,920687,920823,921590,921658,922238,923854,927840,928002,929463,929802,931881,936666,939604,939866,942905,943942,944172,944200,945175,945851,946924,947149,947363,947784,949658,950535,950691,951123,951206,952132,952602,953372,955089,956067,957262,957386,957417,957821,959211,962336,962725,966312,967191,967281,967706,970038,970411,971094,972056,973978,974812,976095,977606,980575,981880,984774,985917,986934,988716,989070,990334,992300,993305,993569,993870,994541,994807,997894,998009,998478,999155};
        int i = l.lenLongestFibSubseq1(arr2);
        System.out.println(i);
    }
}
